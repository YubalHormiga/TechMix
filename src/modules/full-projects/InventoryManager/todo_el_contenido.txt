

--- File: assets\icons\info-svgrepo-com.svg ---
(Skipped (non-matching extension))


--- File: assets\images\agua_mineral.png ---
(Skipped (non-matching extension))


--- File: assets\images\auriculares.png ---
(Skipped (non-matching extension))


--- File: assets\images\bufanda.png ---
(Skipped (non-matching extension))


--- File: assets\images\cafe.png ---
(Skipped (non-matching extension))


--- File: assets\images\cafetera.png ---
(Skipped (non-matching extension))


--- File: assets\images\calcetines.png ---
(Skipped (non-matching extension))


--- File: assets\images\camiseta.png ---
(Skipped (non-matching extension))


--- File: assets\images\cubiertos.png ---
(Skipped (non-matching extension))


--- File: assets\images\desinfectante.png ---
(Skipped (non-matching extension))


--- File: assets\images\detergente.png ---
(Skipped (non-matching extension))


--- File: assets\images\escoba.png ---
(Skipped (non-matching extension))


--- File: assets\images\gorra.png ---
(Skipped (non-matching extension))


--- File: assets\images\guantes.png ---
(Skipped (non-matching extension))


--- File: assets\images\header.webp ---
(Skipped (non-matching extension))


--- File: assets\images\jeans.png ---
(Skipped (non-matching extension))


--- File: assets\images\jugo.png ---
(Skipped (non-matching extension))


--- File: assets\images\laptop.png ---
(Skipped (non-matching extension))


--- File: assets\images\platos.png ---
(Skipped (non-matching extension))


--- File: assets\images\smartphone.png ---
(Skipped (non-matching extension))


--- File: assets\images\snacks.png ---
(Skipped (non-matching extension))


--- File: assets\images\tablet.png ---
(Skipped (non-matching extension))


--- File: assets\images\te.png ---
(Skipped (non-matching extension))


--- File: assets\images\trapos.png ---
(Skipped (non-matching extension))


--- File: assets\images\vasos.png ---
(Skipped (non-matching extension))


--- File: components\InventoryDashboard.vue ---

<script setup>
import { computed } from 'vue'

const props = defineProps({
  products: {
    type: Array,
    required: true
  }
})

const totalQuantity = computed(() => {
  return props.products.reduce((sum, product) => {
    return sum + (product.quantity || 0)
  }, 0)
})

const updateChartData = computed(() => {
  const categoryData = props.products.reduce((acc, product) => {
    const category = product.category || 'Desconocida'
    acc[category] = (acc[category] || 0) + (product.quantity || 0)
    return acc
  }, {})

  return Object.entries(categoryData).map(([category, quantity]) => [
    category,
    totalQuantity.value > 0 ? ((quantity / totalQuantity.value) * 100).toFixed(2) : 0
  ])
})
</script>

<template>
  <div>
    <pie-chart v-if="updateChartData.length" :data="updateChartData" suffix="%" :donut="true" />
    <p v-else>No hay datos para mostrar.</p>
  </div>
</template>

<style scoped></style>



--- File: components\ProductDetails.vue ---

<script setup>
defineProps({
  selectedProductState: {
    type: Object,
    required: true
  }
})

function getImageUrl(imageName) {
  return new URL(`../assets/images/${imageName}.png`, import.meta.url).href
}
</script>

<template>
  <div class="h-[37rem] p-10">
    <div v-if="selectedProductState.name" class="flex flex-col items-center">
      <div class="">
        <img
          :src="getImageUrl(selectedProductState.image)"
          :alt="selectedProductState.name"
          class="w-60 h-60 object-cover bg-no-repeat"
        />
      </div>

      <div class="w p-4">
        <div class="flex flex-col">
          <p class="text-lg font-bold text-[#237078]">
            <span class="text-gray-700">SKU:</span> {{ selectedProductState.id }}
          </p>
          <p class="text-lg font-bold text-[#237078]">
            <span class="text-gray-700">Producto:</span>
            {{ selectedProductState.name }}
          </p>
        </div>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Cantidad:</span> {{ selectedProductState.quantity }} unidades
        </p>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Precio de Compra: </span
          >{{ selectedProductState.purchasePrice }} EUR
        </p>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Precio de Venta: </span
          >{{ selectedProductState.salePrice }} EUR
        </p>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Nivel Mínimo Stock: </span>{{ selectedProductState.minStock }}
        </p>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Estado:</span> {{ selectedProductState.status }}
        </p>
        <p class="text-lg font-bold text-[#237078]">
          <span class="text-gray-700">Descripción: </span> {{ selectedProductState.description }}
        </p>
      </div>
      <!-- Mostrar mensaje si no hay selectedProductStateo seleccionado -->
    </div>
    <div v-else class="text-center">
      <p class="">No se ha seleccionado un selectedProductStateo</p>
    </div>
  </div>
</template>



--- File: components\ProductForm.vue ---

<script setup>
import { onMounted, ref, reactive, computed, watch } from 'vue'
import { db } from '../data/products.js'

const props = defineProps({
  productState: {
    type: Object,
    required: true
  }
})
const emit = defineEmits(['submitProduct'])
const categories = ref(db)
onMounted(() => {
  categories
})

watch(props.productState, (newProductState) => {
  if (newProductState && Object.keys(newProductState).length > 0) {
    Object.assign(product, newProductState)
  }
})
const product = reactive({
  category: '',
  name: '',
  quantity: 0,
  purchasePrice: 0,
  profitMargin: 0,
  salePrice: 0,
  entryDate: new Date().toISOString().split('T')[0],
  minStock: 10,
  status: 'active',
  id: null
})

const handleSubmit = () => {
  emit('submitProduct', { ...product })
  Object.assign(product, {
    category: '',
    name: '',
    quantity: 0,
    purchasePrice: 0,
    profitMargin: 0,
    salePrice: 0,
    entryDate: new Date().toISOString().split('T')[0],
    minStock: 10,
    status: 'active',
    id: null
  })
}
const handleCategoryChange = () => {
  product.name = ''
}

const categoryItems = computed(() => {
  const category = categories.value.find((cat) => cat.name === product.category)
  return category ? category.items.map((item) => item.name) : []
})

const updateSalePrice = () => {
  const purchasePrice = product.purchasePrice
  const profitMargin = product.profitMargin

  if (purchasePrice && profitMargin >= 0) {
    product.salePrice = (purchasePrice * (1 + profitMargin / 100)).toFixed(2)
  } else {
    product.salePrice = '0.00'
  }
}
</script>

<template>
  <div class="flex flex-col p-4 text-[#0b2a34]">
    <div class="p-4 text-center font-bold uppercase">
      <h2 class="text-[#527986]">Añade o modifica el Producto</h2>
    </div>

    <form class="flex flex-col gap-4" @submit.prevent="handleSubmit">
      <div class="flex flex-col">
        <label class="font-bold" for="sku">SKU (Stock Keeping Unit)</label>
        <input v-model="product.sku" class="p-2" type="text" id="sku" placeholder="SKU" />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="category">Categoría del Producto</label>
        <select v-model="product.category" @change="handleCategoryChange" class="p-2" id="category">
          <option value="" disabled>Selecciona una categoría</option>
          <option v-for="cat in categories" :key="cat.name" :value="cat.name">
            {{ cat.name }}
          </option>
        </select>
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="name">Producto</label>
        <select v-model="product.name" class="p-2" id="name" :disabled="!product.category">
          <option value="" disabled>
            {{ product.category ? 'Selecciona un producto' : 'Selecciona una categoría primero' }}
          </option>
          <option v-for="item in categoryItems" :key="item" :value="item">{{ item }}</option>
        </select>
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="quantity">Cantidad del Producto</label>
        <input
          v-model.number="product.quantity"
          class="border-2 w-full p-2 mt-2 placeholder-gray-400 rounded-md"
          type="number"
          id="quantity"
          placeholder="Cantidad de Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="purchasePrice">Precio de Compra</label>
        <input
          v-model.number="product.purchasePrice"
          class="p-2"
          type="number"
          id="purchasePrice"
          placeholder="Precio de compra del Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="salePrice">Ganancia en %</label>
        <input
          v-model.number="product.profitMargin"
          @input="updateSalePrice"
          class="p-2"
          type="number"
          id="salePrice"
          placeholder="Porcentaje de ganancia"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="calculatedSalePrice">Precio de Venta Calculado</label>
        <input
          v-model="product.salePrice"
          class="p-2"
          type="number"
          id="calculatedSalePrice"
          placeholder="Precio de venta calculado"
          disabled
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="entryDate">Fecha de Entrada</label>
        <input
          v-model="product.entryDate"
          class="p-2"
          type="date"
          id="entryDate"
          placeholder="Fecha de entrada del Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="minStock">Nivel mínimo en Stock</label>
        <input
          v-model="product.minStock"
          class="p-2"
          type="number"
          id="minStock"
          placeholder="Nivel mínimo en stock"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold p-2">Estado de disponibilidad</label>
        <div class="flex items-center p-2">
          <input
            type="radio"
            id="status-active"
            value="active"
            v-model="product.status"
            class="mr-2"
          />
          <label for="status-active" class="mr-4">Activo</label>

          <input
            type="radio"
            id="status-inactive"
            value="inactive"
            v-model="product.status"
            class="mr-2"
          />
          <label for="status-inactive">Inactivo</label>
        </div>
      </div>

      <input
        type="submit"
        class="bg-[#42cdc7] rounded-md mt-8 p-2 w-full text-white uppercase font-bold hover:bg-[#42b5af] cursor-pointer transition-colors"
        :value="productState.lotId ? 'Guardar cambios' : 'Registrar producto'"
      />
    </form>
  </div>
</template>

<style scoped></style>



--- File: components\ProductListView.vue ---

<script setup>
import { ref, computed, onMounted, watch } from 'vue'
import { db } from '../data/products.js'

onMounted(() => {
  categories
})

const categories = ref(db)
const props = defineProps({
  products: {
    type: Array,
    required: true
  }
})
defineEmits(['selectedProduct', 'editProduct', 'deleteProduct'])
const categorySelected = ref('')
const productSelected = ref('')

const categoryItems = computed(() => {
  const category = categories.value.find((cat) => cat.name === categorySelected.value)
  return category ? category.items.map((item) => item.name) : []
})

const productsToDisplay = computed(() => {
  let filteredProducts = props.products

  if (categorySelected.value) {
    filteredProducts = filteredProducts.filter(
      (product) => product.category === categorySelected.value
    )
  }

  if (productSelected.value) {
    filteredProducts = filteredProducts.filter((product) => product.name === productSelected.value)
  }

  return filteredProducts
})

const handleCategoryChange = () => {
  productSelected.value = ''
}

watch(
  () => props.products,
  (newValue) => {
    console.log('Productos actualizados:', newValue)
  },
  { deep: true }
)
</script>

<template>
  <div class="p-2">
    <div class="flex flex-col">
      <label class="font-bold" for="category">Categoría del Producto</label>
      <select v-model="categorySelected" @change="handleCategoryChange" class="p-2" id="category">
        <option value="" disabled>Selecciona una categoría</option>
        <option v-for="cat in categories" :key="cat.name" :value="cat.name">
          {{ cat.name }}
        </option>
      </select>
    </div>

    <div class="flex flex-col">
      <label class="font-bold" for="name">Producto</label>
      <select v-model="productSelected" class="p-2" id="name">
        <option value="" disabled>Selecciona un producto</option>
        <option v-for="item in categoryItems" :key="item" :value="item">{{ item }}</option>
      </select>
    </div>

    <div v-if="productsToDisplay.length > 0">
      <div v-for="product in productsToDisplay" :key="product.id">
        <div
          class="flex items-center justify-between gap-4 p-4 mb-4 rounded-lg border border-[#d8dfdf] shadow-lg"
        >
          <div class="flex flex-col justify-between">
            <!-- <div class="flex items-center gap-3"> -->
            <button class="flex justify-center my-2" @click="$emit('selectedProduct', product.id)">
              <img src="../assets//icons/info-svgrepo-com.svg" alt="inf" class="h-8" />
            </button>
            <p class="font-bold">{{ product.name }}</p>
            <!-- </div> -->
            <p><span class="font-semibold">Cantidad:</span>{{ product.quantity }}</p>
          </div>

          <div class="flex flex-col justify-between text-center">
            <p><span class="font-semibold">PreComp:</span>{{ product.purchasePrice }}</p>
            <p><span class="font-semibold">PreVenta:</span>{{ product.salePrice }}</p>
            <p><span class="font-semibold">MinStock:</span>{{ product.minStock }}</p>
          </div>

          <div class="flex flex-col justify-between text-center">
            <p><span class="font-bold">Estado:</span> {{ product.status }}</p>
          </div>

          <div class="flex flex-col gap-2 justify-center">
            <button
              @click="$emit('editProduct', product.id)"
              type="button"
              class="p-2 bg-blue-500 text-white rounded"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                width="16"
                height="16"
                stroke-width="2"
              >
                <path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"></path>
                <path
                  d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"
                ></path>
                <path d="M16 5l3 3"></path>
              </svg>
            </button>
            <button
              @click="$emit('deleteProduct', product.id)"
              type="button"
              class="p-2 bg-red-500 text-white rounded"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                width="16"
                height="16"
                stroke-width="2"
              >
                <path d="M4 7l16 0"></path>
                <path d="M10 11l0 6"></path>
                <path d="M14 11l0 6"></path>
                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped></style>



--- File: data\products.js ---

export const db = [
  {
    name: 'Electrónica',
    items: [
      {
        name: 'Smartphone',
        image: 'smartphone',
        description: 'Un teléfono inteligente con pantalla táctil y múltiples funciones.'
      },
      {
        name: 'Tablet',
        image: 'tablet',
        description: 'Dispositivo portátil ideal para trabajo y entretenimiento.'
      },
      {
        name: 'Laptop',
        image: 'laptop',
        description: 'Ordenador portátil ligero y de alto rendimiento.'
      },
      {
        name: 'Auriculares',
        image: 'auriculares',
        description: 'Auriculares cómodos con sonido de alta calidad.'
      },
      {
        name: 'Cargador USB',
        image: 'cargador_usb',
        description: 'Cargador compacto compatible con múltiples dispositivos USB.'
      }
    ]
  },
  {
    name: 'Alimentos y Bebidas',
    items: [
      {
        name: 'Agua Mineral',
        image: 'agua_mineral',
        description: 'Agua pura y refrescante para hidratarte.'
      },
      {
        name: 'Snacks',
        image: 'snacks',
        description: 'Bocadillos ideales para disfrutar en cualquier momento.'
      },
      {
        name: 'Café',
        image: 'cafe',
        description: 'Café molido de alta calidad para los amantes del café.'
      },
      {
        name: 'Té',
        image: 'te',
        description: 'Té aromático perfecto para relajarte.'
      },
      {
        name: 'Jugo',
        image: 'jugo',
        description: 'Jugo natural lleno de sabor y vitaminas.'
      }
    ]
  },
  {
    name: 'Hogar y Cocina',
    items: [
      {
        name: 'Platos',
        image: 'platos',
        description: 'Platos resistentes y elegantes para tu mesa.'
      },
      {
        name: 'Vasos',
        image: 'vasos',
        description: 'Vasos de vidrio perfectos para cualquier bebida.'
      },
      {
        name: 'Cubiertos',
        image: 'cubiertos',
        description: 'Cubiertos de acero inoxidable de alta calidad.'
      },
      {
        name: 'Sartenes',
        image: 'sartenes',
        description: 'Sartenes antiadherentes ideales para cocinar sin esfuerzo.'
      },
      {
        name: 'Cafetera',
        image: 'cafetera',
        description: 'Cafetera moderna para preparar café delicioso en casa.'
      }
    ]
  },
  {
    name: 'Ropa y Accesorios',
    items: [
      {
        name: 'Camiseta',
        image: 'camiseta',
        description: 'Camiseta de algodón cómoda y casual.'
      },
      {
        name: 'Jeans',
        image: 'jeans',
        description: 'Jeans duraderos con un ajuste moderno.'
      },
      {
        name: 'Gorra',
        image: 'gorra',
        description: 'Gorra ajustable con diseño elegante.'
      },
      {
        name: 'Bufanda',
        image: 'bufanda',
        description: 'Bufanda suave y cálida para el invierno.'
      },
      {
        name: 'Calcetines',
        image: 'calcetines',
        description: 'Calcetines cómodos y transpirables.'
      }
    ]
  },
  {
    name: 'Limpieza',
    items: [
      {
        name: 'Detergente',
        image: 'detergente',
        description: 'Detergente eficaz para ropa limpia y fresca.'
      },
      {
        name: 'Escoba',
        image: 'escoba',
        description: 'Escoba resistente para barrer cualquier superficie.'
      },
      {
        name: 'Desinfectante',
        image: 'desinfectante',
        description: 'Desinfectante poderoso para mantener tu hogar libre de gérmenes.'
      },
      {
        name: 'Trapos',
        image: 'trapos',
        description: 'Trapos absorbentes ideales para limpieza general.'
      },
      {
        name: 'Guantes',
        image: 'guantes',
        description: 'Guantes protectores para tareas de limpieza.'
      }
    ]
  }
]



--- File: InventoryManager.vue ---

<script setup>
import { markRaw, ref, reactive, watch, onMounted, inject } from 'vue'
import { db } from './data/products'
import { useDragAndDrop } from '@formkit/drag-and-drop/vue'
import InventoryDashboard from './components/InventoryDashboard.vue'
import ProductForm from './components/ProductForm.vue'
import ProductListView from './components/ProductListView.vue'
import ProductDetails from './components/ProductDetails.vue'
import AnimatedContainer from '@/components/AnimatedContainer.vue'

const products = ref([])
const selectedProductState = reactive({})
const productState = reactive({})
const toast = inject('toast')

onMounted(() => {
  const productsStorage = localStorage.getItem('products')
  if (productsStorage) {
    try {
      products.value = JSON.parse(productsStorage)
    } catch (e) {
      console.error('Error parsing products from localStorage', e)
      products.value = []
    }
  } else {
    products.value = []
  }
})

const saveProductsToLocalStorage = () => {
  try {
    localStorage.setItem('products', JSON.stringify(products.value))
  } catch (e) {
    console.error('Error saving products to localStorage', e)
  }
}

watch(
  () => products.value,
  () => saveProductsToLocalStorage(),
  { deep: true }
)

const calculatePrices = (product) => {
  product.quantity = product.lots.reduce((sum, lot) => sum + lot.quantity, 0)
  const totalCost = product.lots.reduce((sum, lot) => sum + lot.purchasePrice * lot.quantity, 0)
  product.purchasePrice = parseFloat((totalCost / product.quantity).toFixed(2))
  product.salePrice = parseFloat(
    (product.purchasePrice * (1 + product.profitMargin / 100)).toFixed(2)
  )
}

const submitProduct = (product) => {
  const existProduct = products.value.findIndex((item) => item.name === product.name)
  const selectedCategory = db.find((cat) => cat.name === product.category)
  const selectedItem = selectedCategory?.items.find((item) => item.name === product.name)

  if (existProduct >= 0) {
    const existingProduct = products.value[existProduct]
    const existingLotIndex = existingProduct.lots.findIndex((lot) => lot.lotId === product.lotId)

    if (existingLotIndex >= 0) {
      Object.assign(existingProduct.lots[existingLotIndex], product)
      calculatePrices(existingProduct)
      toast.open({
        message: 'Artículo modificado correctamente',
        type: 'success'
      })
      return
    }

    const newLot = {
      ...product,
      description: selectedItem?.description || 'Descripción no encontrada',
      image: selectedItem?.image || 'Imagen no encontrada',
      lotId: crypto.randomUUID(),
      createdAt: new Date().toISOString()
    }
    existingProduct.lots.push(newLot)
    calculatePrices(existingProduct)
    toast.open({
      message: 'Artículo ingresado correctamente',
      type: 'success'
    })
  } else {
    const newProduct = {
      ...product,
      description: selectedItem?.description || 'Descripción no encontrada',
      image: selectedItem?.image || 'Imagen no encontrada',
      id: crypto.randomUUID(),
      quantity: product.quantity,
      lots: [
        {
          ...product,
          lotId: crypto.randomUUID(),
          createdAt: new Date().toISOString()
        }
      ]
    }
    products.value.push(newProduct)
    toast.open({
      message: 'Artículo ingresado correctamente',
      type: 'success'
    })
  }
}

const selectedProduct = (id) => {
  const product = products.value.find((item) => item.id === id) || {}
  Object.assign(selectedProductState, product)
}

const editProduct = (id) => {
  const productToEdit = products.value.find((item) => item.id === id)
  if (productToEdit) {
    const lastLot = productToEdit.lots[productToEdit.lots.length - 1] || {}
    Object.assign(productState, lastLot)
  }
}

const deleteProduct = (id) => {
  products.value = products.value.filter((product) => product.id !== id)

  toast.open({
    message: 'Producto eliminado correctamente',
    type: 'warning'
  })
}

const [parent, components] = useDragAndDrop([
  {
    name: 'section_1',
    component: markRaw(ProductForm),
    props: { productState: productState },
    emit: { submitProduct }
  },
  {
    name: 'section_2',
    component: markRaw(ProductListView),
    props: { products },
    emit: { selectedProduct, editProduct, deleteProduct }
  },
  {
    name: 'section_3',
    component: markRaw(InventoryDashboard),
    props: { products }
  },
  {
    name: 'section_4',
    component: markRaw(ProductDetails),
    props: { selectedProductState }
  }
])
</script>

<template>
  <AnimatedContainer>
    <main>
      <header>
        <div class="mt-3">
          <img class="w-full max-h-[40rem]" src="./assets/images/header.webp" alt="header image" />
        </div>
      </header>

      <main class="p-4 container">
        <div ref="parent" class="custom-grid-container">
          <div
            v-for="component in components"
            :key="component.name"
            :class="`${component.name}`"
            class="rounded-lg border border-[#d8dfdf] shadow-lg cursor-move"
          >
            <component
              :is="component.component"
              v-bind="component.props"
              v-on="component.emit || {}"
            />
          </div>
        </div>
      </main>
    </main>
  </AnimatedContainer>
</template>

<style scoped>
.custom-grid-container {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
}

@media (min-width: 640px) {
  .custom-grid-container {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 1280px) {
  .custom-grid-container {
    grid-template-columns: repeat(3, 1fr);
  }
}

.section_1 {
  grid-column: span 1 / span 1;
  grid-row: span 4;
  height: 82rem;
  overflow-y: auto;
}
.section_2 {
  grid-column: span 1;
  grid-row: span 4;
  max-height: 82rem;
  overflow-y: auto;
}
.section_3 {
  max-width: 100%;
  overflow: hidden;
  height: 40.5rem;
}
.section_4 {
  max-width: 100%;
  overflow: hidden;
  height: 40.5rem;
}
</style>



--- File: todo_el_contenido.txt ---
(Skipped (non-matching extension))
