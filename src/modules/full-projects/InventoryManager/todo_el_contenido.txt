

--- File: assets\icons\cart.webp ---
(Skipped (non-matching extension))


--- File: assets\images\header.webp ---
(Skipped (non-matching extension))


--- File: components\CategoryFilter.vue ---

<script setup></script>

<template>
  <h1>Category filter</h1>
</template>
<style scoped></style>



--- File: components\InventoryDashboard.vue ---

<script setup>
import { computed } from 'vue'
import { ref } from 'vue'
import { watch } from 'vue'

const props = defineProps({
  products: {
    type: Array,
    required: true
  }
})

const chartData = ref(props.products)
const totalQuantity = computed(() => {
  return props.products.reduce((sum, product) => sum + product.quantity, 0)
})

// Crear los datos del gráfico con porcentajes
const updateChartData = computed(() => {
  return props.products.map((product) => [
    product.category,
    totalQuantity.value > 0
      ? ((product.quantity / totalQuantity.value) * 100).toFixed(2) // Calcular el porcentaje
      : 0
  ])
})
watch(chartData, () => {
  updateChartData()
})
</script>

<template>
  <pie-chart :data="updateChartData" suffix="%" :donut="true"></pie-chart>
</template>

<style scoped></style>



--- File: components\LowStockAlert.vue ---

<script setup></script>

<template>
  <h1>LowStok</h1>
</template>
<style scoped></style>



--- File: components\ProductDetails.vue ---

<script setup></script>

<template>
  <h1>Product dEtails</h1>
</template>
<style scoped></style>



--- File: components\ProductForm.vue ---

<script setup>
import { onMounted, ref, reactive, computed } from 'vue'
import { db } from '../data/products.js'

const emit = defineEmits(['submitProduct'])
const categories = ref(db)
onMounted(() => {
  categories
})

const product = reactive({
  sku: '',
  category: '',
  name: '',
  quantity: '',
  purchasePrice: '',
  salePrice: '',
  entryDate: '',
  minStock: '',
  status: 'active',
  id: null
})

const handleSubmit = () => {
  emit('submitProduct', { ...product, id: crypto.randomUUID() })
}
const handleCategoryChange = () => {
  product.name = ''
}

const categoryItems = computed(() => {
  const category = categories.value.find((cat) => cat.name === product.category)

  return category ? category.items : []
})
</script>

<template>
  <div class="flex flex-col p-4 text-[#0b2a34]">
    <div class="p-4 text-center font-bold uppercase">
      <h2 class="text-[#527986]">Añade o modifica el Producto</h2>
    </div>

    <form class="flex flex-col gap-4" @submit.prevent="handleSubmit">
      <div class="flex flex-col">
        <label class="font-bold" for="sku">SKU (Stock Keeping Unit)</label>
        <input v-model="product.sku" class="p-2" type="text" id="sku" placeholder="SKU" />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="category">Categoría del Producto</label>
        <select v-model="product.category" @change="handleCategoryChange" class="p-2" id="category">
          <option value="" disabled>Selecciona una categoría</option>
          <option v-for="cat in categories" :key="cat.name" :value="cat.name">
            {{ cat.name }}
          </option>
        </select>
      </div>

      <div v-if="product.category" class="flex flex-col">
        <label class="font-bold" for="name">Producto</label>
        <select v-model="product.name" class="p-2" id="name">
          <option value="" disabled>Selecciona un producto</option>
          <option v-for="item in categoryItems" :key="item" :value="item">{{ item }}</option>
        </select>
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="quantity">Cantidad del Producto</label>
        <input
          v-model="product.quantity"
          class="border-2 w-full p-2 mt-2 placeholder-gray-400 rounded-md"
          type="number"
          id="quantity"
          placeholder="Cantidad de Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="purchasePrice">Precio de compra</label>
        <input
          v-model="product.purchasePrice"
          class="p-2"
          type="number"
          id="purchasePrice"
          placeholder="Precio de compra del Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="salePrice">Precio de Venta</label>
        <input
          v-model="product.salePrice"
          class="p-2"
          type="number"
          id="salePrice"
          placeholder="Precio de venta del Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="entryDate">Fecha de Entrada</label>
        <input
          v-model="product.entryDate"
          class="p-2"
          type="date"
          id="entryDate"
          placeholder="Fecha de entrada del Producto"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold" for="minStock">Nivel mínimo en Stock</label>
        <input
          v-model="product.minStock"
          class="p-2"
          type="number"
          id="minStock"
          placeholder="Nivel mínimo en stock"
        />
      </div>

      <div class="flex flex-col">
        <label class="font-bold p-2">Estado de disponibilidad</label>
        <div class="flex items-center p-2">
          <input
            type="radio"
            id="status-active"
            value="active"
            v-model="product.status"
            class="mr-2"
          />
          <label for="status-active" class="mr-4">Activo</label>

          <input
            type="radio"
            id="status-inactive"
            value="inactive"
            v-model="product.status"
            class="mr-2"
          />
          <label for="status-inactive">Inactivo</label>
        </div>
      </div>

      <input
        type="submit"
        class="bg-[#42cdc7] rounded-md mt-8 p-2 w-full text-white uppercase font-bold hover:bg-[#42b5af] cursor-pointer transition-colors"
        value="Registrar producto"
      />
    </form>
  </div>
</template>

<style scoped></style>



--- File: components\ProductListView.vue ---

<script setup>
import { ref, computed, onMounted, inject, watch } from 'vue'
import { db } from '../data/products.js'

onMounted(() => {
  categories
})

const toast = inject('toast')

const categories = ref(db)
const props = defineProps({
  products: {
    type: Array,
    required: true
  }
})

const categorieSelected = ref('')
const productSelected = ref('')

const categoryItems = computed(() => {
  const category = categories.value.find((cat) => cat.name === categorieSelected.value)
  return category ? category.items : []
})

const productsToDisplay = computed(() => {
  let filteredProducts = props.products

  if (categorieSelected.value) {
    filteredProducts = filteredProducts.filter(
      (product) => product.category === categorieSelected.value
    )
  }

  if (productSelected.value) {
    filteredProducts = filteredProducts.filter((product) => product.name === productSelected.value)
  }

  return filteredProducts
})

const handleCategoryChange = () => {
  productSelected.value = ''
}

watch(productsToDisplay, (newValue) => {
  if (newValue.length === 0) {
    toast.open({
      message: 'No se encontraron productos.',
      type: 'info'
    })
  }
})
</script>

<template>
  <div class="p-2">
    <div class="flex flex-col">
      <label class="font-bold" for="category">Categoría del Producto</label>
      <select v-model="categorieSelected" @change="handleCategoryChange" class="p-2" id="category">
        <option value="" disabled>Selecciona una categoría</option>
        <option v-for="cat in categories" :key="cat.name" :value="cat.name">
          {{ cat.name }}
        </option>
      </select>
    </div>

    <div class="flex flex-col">
      <label class="font-bold" for="name">Producto</label>
      <select v-model="productSelected" class="p-2" id="name">
        <option value="" disabled>Selecciona un producto</option>
        <option v-for="item in categoryItems" :key="item" :value="item">{{ item }}</option>
      </select>
    </div>

    <div v-if="productsToDisplay.length > 0">
      <div v-for="product in productsToDisplay" :key="product.id">
        <div
          class="flex items-center justify-between gap-4 p-4 mb-4 rounded-lg border border-[#d8dfdf] shadow-lg"
        >
          <div class="flex flex-col justify-between">
            <p class="font-bold">{{ product.name }}</p>
            <p><span class="font-semibold">Cantidad:</span> {{ product.quantity }}</p>
          </div>

          <div class="flex flex-col justify-between text-center">
            <p><span class="font-semibold">PreComp:</span> {{ product.purchasePrice }}</p>
            <p><span class="font-semibold">PreVenta:</span> {{ product.salePrice }}</p>
            <p><span class="font-semibold">MinStock:</span> {{ product.minStock }}</p>
          </div>

          <div class="flex flex-col justify-between text-center">
            <p><span class="font-bold">Estado:</span> {{ product.status }}</p>
          </div>

          <div class="flex flex-col gap-2 justify-center">
            <button type="button" class="p-2 bg-blue-500 text-white rounded">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                width="16"
                height="16"
                stroke-width="2"
              >
                <path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"></path>
                <path
                  d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"
                ></path>
                <path d="M16 5l3 3"></path>
              </svg>
            </button>
            <button type="button" class="p-2 bg-red-500 text-white rounded">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                width="16"
                height="16"
                stroke-width="2"
              >
                <path d="M4 7l16 0"></path>
                <path d="M10 11l0 6"></path>
                <path d="M14 11l0 6"></path>
                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped></style>



--- File: components\SearchFilter.vue ---

<script setup></script>

<template>
  <h1>SErchFilter</h1>
</template>
<style scoped></style>



--- File: data\products.js ---

export const db = [
  {
    name: 'Electrónica',
    items: ['Smartphone', 'Tablet', 'Laptop', 'Auriculares', 'Cargador USB']
  },
  {
    name: 'Alimentos y Bebidas',
    items: ['Agua Mineral', 'Snacks', 'Café', 'Té', 'Jugo']
  },
  {
    name: 'Hogar y Cocina',
    items: ['Platos', 'Vasos', 'Cubiertos', 'Sartenes', 'Cafetera']
  },
  {
    name: 'Ropa y Accesorios',
    items: ['Camiseta', 'Jeans', 'Gorra', 'Bufanda', 'Calcetines']
  },
  {
    name: 'Limpieza',
    items: ['Detergente', 'Escoba', 'Desinfectante', 'Trapos', 'Guantes']
  }
]



--- File: InventoryManager.vue ---

<script setup>
import { markRaw, ref } from 'vue'
import { useDragAndDrop } from '@formkit/drag-and-drop/vue'
import InventoryDashboard from './components/InventoryDashboard.vue'
import LowStockAlert from './components/LowStockAlert.vue'
import ProductForm from './components/ProductForm.vue'
import ProductListView from './components/ProductListView.vue'
// import ProductDetails from './components/ProductDetails.vue'

const products = ref([])

const submitProduct = (product) => {
  products.value.push({ ...product, id: crypto.randomUUID() })
}

const [parent, components] = useDragAndDrop([
  { name: 'section_1', component: markRaw(ProductForm), props: {}, emit: { submitProduct } },
  { name: 'section_2', component: markRaw(ProductListView), props: { products: products.value } },
  {
    name: 'section_3',
    component: markRaw(InventoryDashboard),
    props: { products: products.value }
  },
  { name: 'section_4', component: markRaw(LowStockAlert), props: {} }
  // { name: 'section_5', component: markRaw(ProductDetails), props: {} },
])
</script>

<template>
  <header>
    <div class="mt-3">
      <img class="w-full max-h-[40rem]" src="./assets/images/header.webp" alt="header image" />
    </div>
  </header>

  <main class="p-4">
    <div ref="parent" class="custom-grid-container">
      <div
        v-for="component in components"
        :key="component.name"
        :class="` ${component.name}`"
        class="rounded-lg border border-[#d8dfdf] shadow-lg cursor-move"
      >
        <component :is="component.component" v-bind="component.props" v-on="component.emit || {}" />
      </div>
    </div>
  </main>
</template>

<style scoped>
@media (min-width: 720px) {
  .custom-grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-flow: dense;
    gap: 1rem;
  }
}

.section_1 {
  grid-column: span 1 / span 1;
  grid-row: span 4;
  max-height: 75rem;
  overflow-y: auto;
}
.section_2 {
  grid-column: span 1;
  grid-row: span 4;
  max-height: 75rem;
  overflow-y: auto;
}
.section_3 {
  grid-column: span 1;
  grid-row: span 2;
  height: 37rem;
}
.section_4 {
  grid-column: span 1;
  grid-row: span 2;
  height: 37rem;
}
/* .section_5 {
  grid-column: span 1;
  grid-row: span 2;
} */
</style>



--- File: todo_el_contenido.txt ---
(Skipped (non-matching extension))
